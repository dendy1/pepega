/// "Точка входа". ///
<program> => <main_class> <class>* EOF

/// Описание класса. ///
<main_class> => "program" <identifier> "{" "public" "static" "void" "Main" "(" "string" "[""]" <identifier> ")" <block> "}"
<class> => "class" <identifier> <class_body>
<class_body> => "{" <class_member_declaration>* "}"
<class_member_declaration> => <access_modifier>? <type> (<field_declaration> | <method_declaration>)
<access_modifier> => PUBLIC | PRIVATE

/// Описание поля класса. ///
<field_declaration> => <variable_declaration> ";"
<variable_declaration> => <variable_declarator> ("," <variable_declarator>)*
<variable_declarator> => <identifier> ("=" <variable_initializer>)?
<variable_initializer> => <expression> | <array_initializer>

<array_initializer> => "{" (<variable_initializer> (",", <variable_initializer>)* ","?)? "}"

/// Описание метода класса. ///
<method_declaration> => <identifier> "(" <method_parameters>? ")" <block>
<method_parameters> => <method_parameter> ("," <method_parameter>)*
<method_parameter> => <type> <identifier> ("=" <expression>)?

<block> => "{" <statement_list>? "}"
<statement_list> => <statement>+
<statement> => <variable_declaration> ";" | <embedded_statement>
<embedded_statement> => <block> | <simple_embedded_statement>
<simple_embedded_statement> => ";" | <expression> ";" | <if> | <switch> | <while> | <do> | <for> | <break> | <continue> | <return>

/// Описание блока IF. ///
<if> => "if" "(" <expression> ")" <if_body> ("else" <if_body>)?
<if_body> => <block> | <simple_embedded_statement>

/// Описание блока SWITCH. ///
<switch> => "switch" "(" <expression> ")" "{" <switch_selection>* "}"
<switch_selection> => <switch_label>+ <statement_list>
<switch_label> => "case" <expression> ":" | "default" ":"

/// Описание блока WHILE. ///
<while> => "while" "(" <expression> ")" <embedded_statement>

/// Описание блока DO. ///
<do> => "do" <embedded_statement> "while" "(" <expression> ")" ";"

/// Описание блока FOR. ///
<for> => "for" "(" <for_initializer>? ";" <expression>? ";" <for_iterator>? ")" <embedded_statement>
<for_initializer> => <variable_declaration> | <expression> ("," <expression>)*
<for_iterator> => <expression> ("," <expression>)*

/// Описание служебных функций. ///
<break> => "break" ";"
<continue> => "continue" ";"
<return> => "return" <expression>? ";"

/// Описание выражения (statement). ///
<expression> => <assigment_expression> | <non_assigment_expression>
<assigment_expression> => <unary_expression> <assigment_operator> <expression>
<assigment_operator> => "=" | "+=" | "-=" | "*=" | "/="

<non_assigment_expression> => <conditional_or_expression>
<conditional_or_expression> => <conditional_and_expression> ("||" <conditional_and_expression>)*
<conditional_and_expression> => <equality_expression> ("&&" <equality_expression>)*
<equality_expression> => <relation_expression> (("==" | "!=") <relation_expression>)*
<relation_expression> => <additive_expression> (("<" | "<=" | ">" | ">=") <additive_expression>)*
<additive_expression> => <multiplicative_expression> (("+" | "-") <multiplicative_expression>)*
<multiplicative_expression> => <unary_expression> (("*" | "/" | "%") <unary_expression>)*
<unary_expression> => <primary_expression> | "+" <unary_expression> | "-" <unary_expression> | "++" <unary_expression> | "--" <unary_expression>
<primary_expression> => <primary_expression_start> (<method_invocation> | '++' | '--')*
<primary_expression_start> => <literal> | "this" | "new" <type> "(" argument_list? ")" | "(" <expression> ")"

<method_invocation> => "(" <argument_list>? ")"
<argument_list> => <argument> ("," <argument>)*
<argument> => <type>? <expression>

/// Описание типов. ///
<type> => <simple_type>
<simple_type> => <numeric_type> | BOOL
<numeric_type> => <integral_type> | <floating_point_type> | DECIMAL
<integral_type> => BYTE | SHORT | USHORT | INT | UINT | LONG | ULONG | CHAR
<floating_point_type> => FLOAT | DOUBLE

<literal> => TRUE | FALSE | STRING_LITERAL | CHARACTER_LITERAL | INTEGER_LITERAL | REAL_LITERAL
<identifier> => IDENTIFIER